module;

#include <array>
#include <chrono>
#include <cstddef>
#include <poll.h>

export module Posix:Poll;
import :Pollable;

export namespace matebook::posix {

template <size_t N>
class Poll {
    std::array<Pollable *, N> _fds;
    std::array<pollfd, N> _pfds;
    std::chrono::milliseconds _timeout;

public:
    enum class Result { FAILURE = -1, TIMEOUT, GOT_EVENT };

    Poll(std::initializer_list<Pollable *> fds,
         std::chrono::milliseconds timeout = std::chrono::milliseconds{-1}) :
        _timeout(timeout) {
        size_t i{};
        for (Pollable * p : fds) {
            _fds[i] = p;
            _pfds[i++] = {p->fd(), POLLIN};
        }
    }

    Result runOnce() {
        auto ret = poll(&_pfds[0], N, _timeout.count());

        if (!ret)
            return Result::TIMEOUT;

        if (ret < 0)
            return Result::FAILURE;

        for (int i = 0; i < N; ++i)
            if (_pfds[i].revents & POLLIN)
                _fds[i]->onDataReady();

        return Result::GOT_EVENT;
    }

    void runUntilTimeout() {
        Result result{Result::FAILURE};

        while (result != Result::TIMEOUT)
            result = runOnce();
    }

    void runUntilFailure() {
        Result result{Result::TIMEOUT};

        while (result != Result::FAILURE)
            result = runOnce();
    }
};

} // namespace matebook::posix
