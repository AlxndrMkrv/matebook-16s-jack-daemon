module;

#include <array>
#include <cstddef>
// #include <cstdint>
#include <iostream>
#include <poll.h>

export module Posix:Poll;
import :Pollable;

export template <size_t N>
class Poll {
public:
    enum class Result { FAILURE = -1, TIMEOUT, GOT_EVENT };

    explicit Poll(const std::array<Pollable *, N> & fds, int timeout_ms = -1);

    Result runOnce();

    void runUntilTimeout();
    void runUntilFailure();

private:
    std::array<Pollable *, N> _fds;
    std::array<pollfd, N> _pfds;
    int _timeout;
};

template <size_t N>
Poll<N>::Poll(const std::array<Pollable *, N> & fds, const int timeout_ms) :
    _fds{fds}, _timeout(timeout_ms)
{
    size_t i = 0;
    for (Pollable * p : fds)
        _pfds[i++] = {p->fd(), POLLIN};
}

template <size_t N>
Poll<N>::Result Poll<N>::runOnce()
{
    int ret = poll(&_pfds[0], N, _timeout);

    if (ret > 0) {
        for (int i = 0; i < N; ++i) {
            if (_pfds[i].revents & POLLIN) {
                _fds[i]->onDataReady();
            }
        }
        return Result::GOT_EVENT;
    }
    else if (ret == 0)
        return Result::TIMEOUT;
    else [[unlikely]]
        return Result::FAILURE;
}

template <size_t N>
void Poll<N>::runUntilTimeout()
{
    Result result{Result::FAILURE};

    while (result != Result::TIMEOUT)
        result = runOnce();
}

template <size_t N>
void Poll<N>::runUntilFailure()
{
    Result result{Result::TIMEOUT};

    while (result != Result::FAILURE)
        result = runOnce();
}
