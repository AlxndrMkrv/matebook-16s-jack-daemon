module;

#include <cerrno>
#include <csignal>
#include <cstring>
#include <format>

using THandler = void(int);

export module Posix:Signal;

export namespace matebook::posix::signal {

enum class Type { INT = SIGINT, TERM = SIGTERM };

void BlockAll()
{
    sigset_t mask;

    if (sigemptyset(&mask) < 0)
        throw std::runtime_error(std::format(
            "Failed to set empty signal mask: {}", std::strerror(errno)));

    if (sigprocmask(SIG_SETMASK, &mask, nullptr) < 0)
        throw std::runtime_error(
            std::format("Failed to set signal mask: {}", std::strerror(errno)));
}

const char * const SigName(int signal) noexcept {
    return strsignal(signal);
}

void Assign(Type signal, THandler & handler)
{
    struct ::sigaction action{};
    action.sa_handler = &handler;

    if (::sigaction(static_cast<int>(signal), &action, nullptr) < 0)
        throw std::runtime_error(std::format(
            "Failed to assign action to signal {}: {}",
            SigName(static_cast<int>(signal)), std::strerror(errno)));
}

} // namespace matebook::posix::signal
