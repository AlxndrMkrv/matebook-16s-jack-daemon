module;

/**
 * The source code of this module mostly got from the ALSA project
 * https://github.com/alsa-project/alsa-tools/tree/master/hda-verb
 */

#include <cstring>
#include <filesystem>
#include <format>
#include <sys/ioctl.h>

export module Posix:HdaDevice;
import :File;

struct hda_verb_ioctl {
    uint32_t verb;
    uint32_t response;
};

static constexpr uint32_t GetVersion = _IOR('H', 0x10, int);
static constexpr uint32_t WriteVerb = _IOWR('H', 0x11, struct hda_verb_ioctl);
static constexpr uint32_t MinVersion = (1 << 16);

static constexpr auto MakeVerb(uint8_t nid, uint16_t verb, uint16_t param) {
    constexpr uint32_t NidShift = 24;
    constexpr uint32_t VerbShift = 8;

    return nid << NidShift | verb << VerbShift | param;
}

export namespace matebook::posix {

class HdaDevice : public virtual File {
public:
    explicit HdaDevice(const std::filesystem::path & path) :
        File{path, File::Access::WRITE} {
        int version = -1;
        if (ioctl(static_cast<int>(*this), GetVersion, &version) < 0)
            throw std::runtime_error(
                std::format("Failed to get version of hda driver: {}",
                            std::strerror(errno)));

        if (version < MinVersion)
            throw std::runtime_error(
                "HDA driver version number is less than \"1.0.0\"");
    }

    void writeVerb(unsigned char nid, unsigned short verb,
                   unsigned short param) {
        hda_verb_ioctl val{};
        val.verb = MakeVerb(nid, verb, param);
        if (ioctl(static_cast<int>(*this), WriteVerb, &val) < 0)
            throw std::runtime_error(
                std::format("Failed to write verb [{:x}, {:x}, {:x}]: {}", nid,
                            verb, param, std::strerror(errno)));
    }
};

} // namespace matebook::posix
