module;

/**
 * The source code of this module mostly got from the ALSA project
 * https://github.com/alsa-project/alsa-tools/tree/master/hda-verb
 */

#include <cstring>
#include <filesystem>
#include <format>
#include <sys/ioctl.h>

export module Posix:HdaDevice;
import :File;

struct hda_verb_ioctl {
    uint32_t verb;
    uint32_t response;
};

static constexpr uint32_t GetVersion = _IOR('H', 0x10, int);
static constexpr uint32_t WriteVerb = _IOWR('H', 0x11, struct hda_verb_ioctl);
static constexpr uint32_t MinVersion = ((1 << 16) | (0 << 8) | (0 << 0));

static constexpr uint32_t MakeVerb(uint8_t nid, uint16_t verb, uint16_t param)
{
    constexpr uint32_t NidShift = 24;
    constexpr uint32_t VerbShift = 8;

    return nid << NidShift | verb << VerbShift | param;
}

export class HdaDevice : public virtual File {
public:
    explicit HdaDevice(const std::filesystem::path & path);

    // bool checkVersion(std::string_view & error);

    void writeVerb(unsigned char nid, unsigned short verb,
                   unsigned short param);
};

HdaDevice::HdaDevice(const std::filesystem::path & path) :
    File(path, File::Access::WRITE)
{
    int version = -1;
    if (ioctl(static_cast<int>(*this), GetVersion, &version) < 0)
        throw std::runtime_error(std::format(
            "Failed to get version of hda driver: {}", std::strerror(errno)));

    if (version < MinVersion)
        throw std::runtime_error(
            "HDA driver version number is less than \"1.0.0\"");
}

void HdaDevice::writeVerb(unsigned char nid, unsigned short verb,
                          unsigned short param)
{
    hda_verb_ioctl val{};
    val.verb = MakeVerb(nid, verb, param);
    if (ioctl(static_cast<int>(*this), WriteVerb, &val) < 0)
        throw std::runtime_error(
            std::format("Failed to write verb [{:x}, {:x}, {:x}]: {}", nid,
                        verb, param, std::strerror(errno)));
}

/*bool HdaDevice::checkVersion(std::string_view & error)
{
    int version;
    if (ioctl(static_cast<int>(*this), GetVersion, &version) < 0) {
        error = std::strerror(errno);
        return false;
    }

    if (version < MinVersion) {
        error = "version number got from ioctl() is less than \"1.0.0\"";
        return false;
    }

    return true;
}*/

/*
bool HdaDevice::on_jack_inserted(std::string_view & error)
{
    // Move the output to the headphones DAC
    if (!write_verb(0x16, 0x701, 0x0, error))
        return false;

    // Disable the speaker
    if (!write_verb(0x17, 0x70C, 0x0, error))
        return false;

    // Pin the output mode
    if (!write_verb(0x1, 0x717, 0x2, error))
        return false;

    // Enable the pin
    if (!write_verb(0x1, 0x716, 0x2, error))
        return false;

    // Clear the pin value
    if (!write_verb(0x1, 0x715, 0x0, error))
        return false;

    return true;
}

bool HdaDevice::on_jack_removed(std::string_view & error)
{
    // Move the output to the headphones DAC
    if (!write_verb(0x16, 0x701, 0x0, error))
        return false;

    // Enable the speaker
    if (!write_verb(0x17, 0x70C, 0x0002, error))
        return false;

    // Disable the headphones
    if (!write_verb(0x1, 0x715, 0x2, error))
        return false;

    return true;
}*/

/*namespace HdaVerb {

bool write_verb(int fd, unsigned char nid, unsigned short verb,
                unsigned short param, std::string_view & error)
{
    hda_verb_ioctl val;
    val.verb = MakeVerb(nid, verb, param);
    if (ioctl(fd, WriteVerb, &val) < 0) {
        error = std::strerror(errno);
        return false;
    }
    return true;
}

export bool check_version(int fd, std::string_view & error)
{
    int version;
    if (ioctl(fd, GetVersion, &version) < 0) {
        error = std::strerror(errno);
        return false;
    }

    if (version < MinVersion) {
        error = "Version number got from ioctl() is less than \"1.0.0\"";
        return false;
    }

    return true;
}

export bool on_jack_inserted(int fd, std::string_view & error)
{
    // Move the output to the headphones DAC
    if (!write_verb(fd, 0x16, 0x701, 0x0, error))
        return false;

    // Disable the speaker
    if (!write_verb(fd, 0x17, 0x70C, 0x0, error))
        return false;

    // Pin the output mode
    if (!write_verb(fd, 0x1, 0x717, 0x2, error))
        return false;

    // Enable the pin
    if (!write_verb(fd, 0x1, 0x716, 0x2, error))
        return false;

    // Clear the pin value
    if (!write_verb(fd, 0x1, 0x715, 0x0, error))
        return false;

    return true;
}

export bool on_jack_removed(int fd, std::string_view & error)
{
    // Move the output to the headphones DAC
    if (!write_verb(fd, 0x16, 0x701, 0x0, error))
        return false;

    // Enable the speaker
    if (!write_verb(fd, 0x17, 0x70C, 0x0002, error))
        return false;

    // Disable the headphones
    if (!write_verb(fd, 0x1, 0x715, 0x2, error))
        return false;

    return true;
}

}*/ // namespace HdaVerb
