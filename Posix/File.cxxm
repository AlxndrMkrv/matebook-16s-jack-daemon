module;

#include <cerrno>
#include <cstring>
#include <fcntl.h>
#include <filesystem>
#include <format>
#include <unistd.h>

export module Posix:File;

export namespace matebook::posix {

class File {
    int _fd{};
    std::filesystem::path _path;

public:
    enum class Access { READ = O_RDONLY, WRITE = O_WRONLY, RW = O_RDWR };

    File(const File &) = delete;
    File(File &&) = default;
    File & operator=(const File &) = delete;
    File & operator=(File &&) = default;

    explicit File(const std::filesystem::path & path, Access access) :
        _fd(open(path.string().c_str(), static_cast<int>(access))),
        _path(path) {
        if (_fd < 0)
            throw std::runtime_error(std::format(
                "Failed to open {} with \"{}\" permissions: {}", path.string(),
                AccessName(access), std::strerror(errno)));
    }

    ~File() {
        if (_fd >= 0)
            close(_fd);
    }

    inline operator int() const {
        return _fd;
    }

    [[nodiscard]] inline bool ready() const {
        return _fd >= 0;
    }

    [[nodiscard]] inline std::filesystem::path path() const {
        return _path;
    }

    template <class T>
    void read(T & buf) const {
        ssize_t bytes = ::read(_fd, static_cast<void *>(&buf), sizeof(buf));

        if (bytes < 0) [[unlikely]]
            throw std::runtime_error(std::format("Failed to read from {}: {}",
                                                 path().string(),
                                                 std::strerror(errno)));
        else if (bytes != sizeof(buf)) [[unlikely]]
            throw std::runtime_error(
                std::format("Failed to read from {}: has to read {} bytes, but "
                            "got {}",
                            path().string(), sizeof(buf), bytes));
    }

private:
    static const char * const AccessName(const Access & access) {
        switch (access) {
        case Access::READ:
            return "r";
        case Access::WRITE:
            return "w";
        case Access::RW:
            return "rw";
        default:
            return "invalid permission";
        }
    }
};

} // namespace matebook::posix
