module;

#include <cstring>
#include <fcntl.h>
#include <filesystem>
#include <poll.h>
#include <string_view>
#include <unistd.h>

export module Wrappers;

export class EventDeviceDescriptor {
public:
    EventDeviceDescriptor(const EventDeviceDescriptor &) = delete;

    explicit EventDeviceDescriptor(const std::filesystem::path & event_dev) :
        _fd(open(event_dev.string().c_str(), O_RDONLY))
    {
        if (_fd < 0) {
            _error = std::strerror(errno);
        }
    }

    ~EventDeviceDescriptor()
    {
        if (_fd > 0)
            close(_fd);
    }

    inline bool ready() const { return _fd >= 0; }

    inline const std::string_view error() const { return _error; }

    inline operator int() const { return _fd; }

private:
    int _fd;
    std::string _error;
};

export class Poll {
public:
    enum class Result { TIMEOUT, GOT_EVENT, FAILURE };

    Poll(const EventDeviceDescriptor & fd, const int timeout_ms) :
        _fd(fd), _pfd{fd, POLLIN}, _timeout(timeout_ms)
    {
    }

    Result run()
    {
        int ret = poll(&_pfd, 1, _timeout);

        if (ret == 0) [[likely]]
            return Result::TIMEOUT;
        else if (ret > 0)
            return Result::GOT_EVENT;
        else [[unlikely]]
            return Result::FAILURE;
    }

private:
    const EventDeviceDescriptor & _fd;
    pollfd _pfd;
    const int _timeout;
};
